* 前提
  这是看帅哥翻译国外《Writing GNU Emacs Extensions》[[https://github.com/slegetank/WGEECN]]，
 《Writing GNU Emacs Extensions》是由Bob Glicksteion在1997年基于Emacs 19版本编写的一本关于如何编写Emacs extensions的书。作者对于基础的讲解非常非常耐心，
 很适合想要深入学习使用emacs和elisp的同志作为基础读物。
 Emacs的中文书籍很少，对于部分同志，特别是想入坑的同志来说难免遗憾。因此将本书翻译为中文，以为有志于走上不归路的后来人提供指引。
 这里我只记录下自己不太熟悉基本的方法函数以及一些基本概念，以便为了以后的使用和学习

* 01
** 1. 将按键绑定到命令上 -- (global-set-key)
     在Emacs里，每个按键都触发一条命令或者是一个触发命令的多键序列的一部分。就像我们将要看到的，命令是一种特殊的Lisp函数。
  使一个按键触发类似帮助这种命令的行为被称为绑定。我们需要执行一些Lisp代码来将按键绑定到命令上。global-set-key是一个用于做这件事的函数。
  函数global-set-key使用两个参数：要绑定的按键序列，以及要绑定的命令。
  #+BEGIN_SRC emacs-lisp
    (global-set-key keysequence command)
  #+END_SRC
** 2. 字符串表示按键
     在Emacs Lisp中有一些不同的方式来表示一个按键序列。最简单的是直接使用字符串。
  #+BEGIN_SRC emacs-lisp
  "xyz" ;三个字母的字符串
  #+END_SRC
  像META-question-mark这种特殊字符在字符串里使用特殊的标识符：“\M-?”来表示。虽然字符串里有四个字母，但Emacs会将此字符串读为META question-mark
  在Emacs的术语中，M-x是META-x的简写，“\M-x”是字符串版本。CONTROL-x在Emacs文档中简写为C-x，在字符串中表示为“\C-x”。你也可以组合CONTROL和META键。
  CONTROL-META-x简写作C-M-x，字符串表示为“\C-\M-x”。顺便，”\C-\M-x”和”\M-\C-x”(META-CONTROL-x)等价。
  (CONTROL-x在文档里有时也表示为^x，那么字符串就表示为”\^x”。)

** 3. C-h绑定到什么
     阻止符号（以及其他任何Lisp表达式）被求值的方法是在它的前面加一个单引号（’）进行引用（quoted）。就像这样：
  #+BEGIN_SRC emacs-lisp
  (global-set-key "\M-?" 'help-command)
  #+END_SRC

  顺便，为了说明引用和非引用的区别，下面两条表达式可以达成同样的效果：
  #+BEGIN_SRC emacs-lisp
  (setq x 'help-command) ;  setq分配一个变量
  (global-set-key "\M-?" x) ; 使用 x 的变量值
  #+END_SRC
  符号并不是唯一可以被单引号前缀的；任何Lisp表达式都能被引用，包括列表，数字，字符串，以及其他我们后面将要学到的表达式。’expr是下面的简写：
  #+BEGIN_SRC emacs-lisp
  (global-set-key "\M-?" x) ; 使用 x 的变量值
  #+END_SRC
  符号help-command需要引用而字符串参数“\M-?”却不需要。这是因为在Lisp里，字符串是自解释的，当字符串被执行时，它返回的是它本身。
  所以对其进行引用是无害而多余的。数字，字符以及向量（vector）是其他自解释的Lisp表达式。

** 4. C-h应该绑定到什么？
  (1) 使用命令eval-expression，这绑定到了M-:[6]。这个命令在minibuffer（屏幕的底部）中提示你输入一个Lisp表达式，然后执行它并输出结果。
  (2) 使用*scratch* buffer:这个buffer在Emacs启动的时候就会自动创建 。
  它使用了Lisp 交互模式。在这个模式里，按下C-j来执行eval-print-last-sexp，它很像eval-last-sexp，除了它会将结果插入到光标所在的位置。
  Lisp交互模式的另一个特性是你可以使用M-TAB进行自动补全（触发lisp-complete-symbol）。Lisp交互模式在用来调试太长的Lisp表达式或者数据结构太复杂的时候特别有用。

** 5. Apropos
   Emacs的最重要的在线帮助特性，apropos
   使用apropos命令，它允许你使用表达式来搜索所有已知的变量名和函数名。例如：
  #+BEGIN_SRC emacs-lisp
  M-x apropos RET delete RET
  #+END_SRC
  返回值是一个列出了所有符合“delete”的变量和函数的buffer。
  搜索的对象是Emacs命令，而不是变量或者函数，我们可以使用command-apropos（M-? a）来缩小搜索范围。
  命令和其他Lisp函数的区别是命令特别用于交互式的触发，也就是说可以通过按键或者M-x触发。非命令的函数只能被其他Lisp代码调用或者被类似eval-epression和eval-last-sexp这样的命令来执行。
